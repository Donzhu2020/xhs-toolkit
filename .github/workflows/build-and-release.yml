name: 🚀 构建和发布小红书MCP工具包

on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      use_custom_notes:
        description: '使用自定义发布说明'
        required: false
        default: false
        type: boolean
      additional_notes:
        description: '额外发布说明（可选，将追加到RELEASE_NOTES.md后）'
        required: false
        default: ''
        type: string
  
  # 推送标签时也触发（备用方式）
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============================================
  # 代码质量检查
  # ============================================
  lint-and-test:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: 🔍 代码风格检查
      run: |
        # 跳过长行和一些常见警告
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics \
          --exclude=__pycache__,*.pyc,build,dist
        
    - name: ✅ 语法检查
      run: |
        # 检查主入口文件
        python -m py_compile xhs_toolkit.py
        
        # 检查src目录下的所有Python文件
        find src/ -name "*.py" -type f | while read file; do
          echo "检查文件: $file"
          python -m py_compile "$file"
        done
        
    - name: 🧪 模块导入测试
      run: |
        # 测试关键模块导入
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        # 测试核心模块
        from src.core.config import XHSConfig
        from src.core.exceptions import XHSToolkitError
        from src.core.browser import ChromeDriverManager
        
        # 测试认证模块
        from src.auth.cookie_manager import CookieManager
        
        # 测试工具模块
        from src.utils.logger import get_logger
        from src.utils.text_utils import safe_print
        
        # 测试小红书模块
        from src.xiaohongshu.models import XHSNote
        from src.xiaohongshu.client import XHSClient
        
        # 测试服务器模块
        from src.server.mcp_server import MCPServer
        
        print('✅ 所有模块导入成功')
        "

  # ============================================
  # 多平台构建
  # ============================================
  build:
    name: 🔨 构建 ${{ matrix.os }}
    needs: lint-and-test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: xhs-toolkit-linux-x64
            setup_cmd: |
              sudo apt-get update
              sudo apt-get install -y wget unzip xvfb
              
          - os: windows-latest  
            platform: windows
            arch: x64
            binary_name: xhs-toolkit-windows-x64.exe
            setup_cmd: |
              # Windows平台暂不安装Chrome（用户自行安装）
              echo "Windows platform setup"
              
          - os: macos-latest
            platform: macos
            arch: x64  
            binary_name: xhs-toolkit-macos-x64
            setup_cmd: |
              # macOS平台暂不安装Chrome（用户自行安装）
              echo "macOS platform setup"
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境  
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 🔧 平台特定设置
      run: ${{ matrix.setup_cmd }}
      shell: bash
      
    - name: 📦 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 🔨 构建可执行文件
      run: |
        # 确保在项目根目录执行，使用spec文件构建
        pwd
        ls -la
        echo "构建前检查文件："
        ls -la xhs_toolkit.py
        ls -la .github/xhs_toolkit.spec
        
        # 从项目根目录执行PyInstaller
        python -m PyInstaller \
          --clean \
          --noconfirm \
          --workpath ./build \
          --distpath ./dist \
          .github/xhs_toolkit.spec
        
        # 重命名生成的文件以匹配平台
        if [ "${{ matrix.platform }}" = "windows" ]; then
          # Windows平台应该生成.exe文件
          if [ -f "dist/xhs-toolkit.exe" ]; then
            mv dist/xhs-toolkit.exe dist/${{ matrix.binary_name }}
          elif [ -f "dist/xhs-toolkit" ]; then
            mv dist/xhs-toolkit dist/${{ matrix.binary_name }}
          fi
        else
          # Linux和macOS平台
          if [ -f "dist/xhs-toolkit" ]; then
            mv dist/xhs-toolkit dist/${{ matrix.binary_name }}
          elif [ -f "dist/xhs-toolkit.exe" ]; then
            mv dist/xhs-toolkit.exe dist/${{ matrix.binary_name }}
          fi
        fi
      shell: bash
      
    - name: 🔍 检查构建结果
      run: |
        echo "📁 构建目录结构:"
        find dist/ -type f
        echo "📦 可执行文件信息:"
        ls -la dist/
      shell: bash
      
    - name: 📤 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary_name }}
        path: |
          dist/${{ matrix.binary_name }}*
          env_example
          README.md
          LICENSE
        retention-days: 7

  # ============================================
  # 创建发布版本
  # ============================================
  release:
    name: 🎉 创建Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录，用于生成更新日志
    
    - name: 🏷️ 设置版本信息
      id: version
      run: |
        # 从version.txt读取版本号
        if [ -f "version.txt" ]; then
          VERSION_NO_V=$(cat version.txt | tr -d '\n\r' | xargs)
          echo "📄 从version.txt读取版本: $VERSION_NO_V"
        else
          echo "❌ version.txt文件不存在"
          exit 1
        fi
        
        # 确保版本号以v开头
        if [[ $VERSION_NO_V == v* ]]; then
          VERSION=$VERSION_NO_V
          VERSION_NO_V=${VERSION#v}
        else
          VERSION="v$VERSION_NO_V"
        fi
        
        echo "🏷️ 最终版本号: $VERSION"
        echo "📝 版本号（无v）: $VERSION_NO_V"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_no_v=${VERSION_NO_V}" >> $GITHUB_OUTPUT
      
    - name: 📥 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: 📦 打包发布文件
      run: |
        mkdir -p release/
        
        # 检查下载的artifact结构
        echo "📋 Artifact结构检查:"
        find artifacts/ -type f | head -20
        
        # 为每个平台创建压缩包
        cd artifacts/
        
        # Linux
        if [ -d "xhs-toolkit-linux-x64" ]; then
          mkdir -p linux-package
          # 查找Linux可执行文件
          if [ -f "xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          elif [ -f "xhs-toolkit-linux-x64/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          else
            echo "❌ Linux可执行文件未找到"
            find xhs-toolkit-linux-x64/ -name "*linux*" -type f
          fi
          cp xhs-toolkit-linux-x64/{env_example,README.md,LICENSE} linux-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-linux-x64.tar.gz -C linux-package .
        fi
        
        # Windows  
        if [ -d "xhs-toolkit-windows-x64.exe" ]; then
          mkdir -p windows-package
          # 查找Windows可执行文件
          if [ -f "xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          elif [ -f "xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          else
            echo "❌ Windows可执行文件未找到"
            find xhs-toolkit-windows-x64.exe/ -name "*windows*" -type f
          fi
          cp xhs-toolkit-windows-x64.exe/{env_example,README.md,LICENSE} windows-package/ 2>/dev/null || true
          cd windows-package && zip -r ../../release/xhs-toolkit-windows-x64.zip . && cd ..
        fi
        
        # macOS
        if [ -d "xhs-toolkit-macos-x64" ]; then
          mkdir -p macos-package  
          # 查找macOS可执行文件
          if [ -f "xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          elif [ -f "xhs-toolkit-macos-x64/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          else
            echo "❌ macOS可执行文件未找到"
            find xhs-toolkit-macos-x64/ -name "*macos*" -type f
          fi
          cp xhs-toolkit-macos-x64/{env_example,README.md,LICENSE} macos-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-macos-x64.tar.gz -C macos-package .
        fi
        
        cd ../
        echo "📦 最终发布文件:"
        ls -la release/
        
    - name: 📝 生成发布说明
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "📝 准备发布说明..."
        
        # 检查是否存在.github/workflows/RELEASE_NOTES.md
        if [ -f ".github/workflows/RELEASE_NOTES.md" ]; then
          echo "📄 使用.github/workflows/RELEASE_NOTES.md作为发布说明"
          cp .github/workflows/RELEASE_NOTES.md release-notes.md
        else
          echo "📝 未找到发布说明文件，使用版本号作为发布说明"
          echo "## 小红书MCP工具包 ${VERSION}" > release-notes.md
        fi
        
        # 如果手动输入了额外的发布说明，追加到文件末尾
        if [ -n "${{ github.event.inputs.additional_notes }}" ]; then
          echo "" >> release-notes.md
          echo "### 额外说明" >> release-notes.md
          echo "" >> release-notes.md
          echo "${{ github.event.inputs.additional_notes }}" >> release-notes.md
        fi
        
        echo "✅ 发布说明准备完成"
        
    - name: 🎉 创建GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.version }}
        name: "小红书MCP工具包 ${{ steps.version.outputs.version }}"
        bodyFile: release-notes.md
        draft: false
        prerelease: false
        artifacts: "release/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true  # 允许更新已存在的release
        makeLatest: true    # 标记为最新版本
        generateReleaseNotes: false  # 不使用自动生成，使用我们的自定义说明
        
    - name: 📊 发布完成通知
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} 创建成功!"
        echo "📦 包含以下文件:"
        ls -la release/
        echo "🔗 访问地址: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" 