name: 🚀 构建和发布小红书MCP工具包

on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      version:
        description: 'xhs_toolkit:v1.0.2'
        required: true
        default: 'v1.0.2'
        type: string
      release_type:
        description: '发布类型'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch   # 修复版本 (1.0.1 -> 1.0.2)
        - minor   # 功能版本 (1.0.0 -> 1.1.0)
        - major   # 重大版本 (1.0.0 -> 2.0.0)
      release_notes:
        description: '发布说明（可选，将追加到自动生成的说明后）'
        required: false
        default: ''
        type: string
  
  # 推送标签时也触发（备用方式）
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============================================
  # 代码质量检查
  # ============================================
  lint-and-test:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: 🔍 代码风格检查
      run: |
        # 跳过长行和一些常见警告
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics \
          --exclude=__pycache__,*.pyc,build,dist
        
    - name: ✅ 语法检查
      run: |
        # 检查主入口文件
        python -m py_compile xhs_toolkit.py
        
        # 检查src目录下的所有Python文件
        find src/ -name "*.py" -type f | while read file; do
          echo "检查文件: $file"
          python -m py_compile "$file"
        done
        
    - name: 🧪 模块导入测试
      run: |
        # 测试关键模块导入
        python -c "
        import sys
        sys.path.insert(0, '.')
        
        # 测试核心模块
        from src.core.config import XHSConfig
        from src.core.exceptions import XHSToolkitError
        from src.core.browser import ChromeDriverManager
        
        # 测试认证模块
        from src.auth.cookie_manager import CookieManager
        
        # 测试工具模块
        from src.utils.logger import get_logger
        from src.utils.text_utils import safe_print
        
        # 测试小红书模块
        from src.xiaohongshu.models import XHSNote
        from src.xiaohongshu.client import XHSClient
        
        # 测试服务器模块
        from src.server.mcp_server import MCPServer
        
        print('✅ 所有模块导入成功')
        "

  # ============================================
  # 多平台构建
  # ============================================
  build:
    name: 🔨 构建 ${{ matrix.os }}
    needs: lint-and-test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: xhs-toolkit-linux-x64
            setup_cmd: |
              sudo apt-get update
              sudo apt-get install -y wget unzip xvfb
              
          - os: windows-latest  
            platform: windows
            arch: x64
            binary_name: xhs-toolkit-windows-x64.exe
            setup_cmd: |
              # Windows平台暂不安装Chrome（用户自行安装）
              echo "Windows platform setup"
              
          - os: macos-latest
            platform: macos
            arch: x64  
            binary_name: xhs-toolkit-macos-x64
            setup_cmd: |
              # macOS平台暂不安装Chrome（用户自行安装）
              echo "macOS platform setup"
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境  
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 🔧 平台特定设置
      run: ${{ matrix.setup_cmd }}
      shell: bash
      
    - name: 📦 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 🔨 构建可执行文件
      run: |
        # 使用spec文件构建，提供更好的控制
        pyinstaller \
          --clean \
          --noconfirm \
          --onefile \
          --console \
          --name ${{ matrix.binary_name }} \
          .github/xhs_toolkit.spec
        
        # 重命名生成的文件
        if [ -f "dist/xhs-toolkit" ]; then
          mv dist/xhs-toolkit dist/${{ matrix.binary_name }}
        elif [ -f "dist/xhs-toolkit.exe" ]; then
          mv dist/xhs-toolkit.exe dist/${{ matrix.binary_name }}
        fi
      shell: bash
      
    - name: 🔍 检查构建结果
      run: |
        echo "📁 构建目录结构:"
        find dist/ -type f
        echo "📦 可执行文件信息:"
        ls -la dist/
      shell: bash
      
    - name: 📤 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary_name }}
        path: |
          dist/${{ matrix.binary_name }}*
          env_example
          README.md
          LICENSE
        retention-days: 7

  # ============================================
  # 创建发布版本
  # ============================================
  release:
    name: 🎉 创建Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录，用于生成更新日志
    
    - name: 🏷️ 设置版本信息
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          VERSION="${{ github.ref_name }}"
          RELEASE_TYPE="patch"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
        echo "version_no_v=${VERSION#v}" >> $GITHUB_OUTPUT
      
    - name: 📥 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: 📦 打包发布文件
      run: |
        mkdir -p release/
        
        # 检查下载的artifact结构
        echo "📋 Artifact结构检查:"
        find artifacts/ -type f | head -20
        
        # 为每个平台创建压缩包
        cd artifacts/
        
        # Linux
        if [ -d "xhs-toolkit-linux-x64" ]; then
          mkdir -p linux-package
          # 查找Linux可执行文件
          if [ -f "xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          elif [ -f "xhs-toolkit-linux-x64/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          else
            echo "❌ Linux可执行文件未找到"
            find xhs-toolkit-linux-x64/ -name "*linux*" -type f
          fi
          cp xhs-toolkit-linux-x64/{env_example,README.md,LICENSE} linux-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-linux-x64.tar.gz -C linux-package .
        fi
        
        # Windows  
        if [ -d "xhs-toolkit-windows-x64.exe" ]; then
          mkdir -p windows-package
          # 查找Windows可执行文件
          if [ -f "xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          elif [ -f "xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          else
            echo "❌ Windows可执行文件未找到"
            find xhs-toolkit-windows-x64.exe/ -name "*windows*" -type f
          fi
          cp xhs-toolkit-windows-x64.exe/{env_example,README.md,LICENSE} windows-package/ 2>/dev/null || true
          cd windows-package && zip -r ../../release/xhs-toolkit-windows-x64.zip . && cd ..
        fi
        
        # macOS
        if [ -d "xhs-toolkit-macos-x64" ]; then
          mkdir -p macos-package  
          # 查找macOS可执行文件
          if [ -f "xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          elif [ -f "xhs-toolkit-macos-x64/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          else
            echo "❌ macOS可执行文件未找到"
            find xhs-toolkit-macos-x64/ -name "*macos*" -type f
          fi
          cp xhs-toolkit-macos-x64/{env_example,README.md,LICENSE} macos-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-macos-x64.tar.gz -C macos-package .
        fi
        
        cd ../
        echo "📦 最终发布文件:"
        ls -la release/
        
    - name: 📝 生成发布说明
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        RELEASE_TYPE="${{ steps.version.outputs.release_type }}"
        VERSION_NO_V="${{ steps.version.outputs.version_no_v }}"
        
        # 根据版本生成特定的更新说明
        if [ "${VERSION_NO_V}" = "1.0.2" ]; then
          cat > release-notes.md << 'EOF'
        ## 🌺 小红书MCP工具包 v1.0.2
        
        > 🏗️ **重构版本** - 全面重构为企业级框架结构
        
        ### 🎯 重大重构
        
        - **🏗️ 模块化重构**: 按照SOLID原则重构代码结构，提升可维护性和扩展性
        - **📁 新目录结构**: 采用标准的src/目录结构，模块职责更清晰
        - **🔧 统一异常处理**: 实现统一的错误处理边界组件
        - **⚡ 性能优化**: 异步处理、资源管理、内存优化
        
        ### 📂 新架构特性
        
        ```
        xhs-toolkit/
        ├── xhs_toolkit.py              # 🚀 主入口（统一CLI）
        ├── src/                        # 📁 源代码目录
        │   ├── core/                   # 🔧 核心功能
        │   │   ├── config.py          # 配置管理
        │   │   ├── browser.py         # 浏览器管理  
        │   │   └── exceptions.py      # 异常处理
        │   ├── auth/                   # 🔐 认证模块
        │   │   └── cookie_manager.py  # Cookie管理
        │   ├── xiaohongshu/           # 🌺 平台功能
        │   │   ├── models.py          # 数据模型
        │   │   └── client.py          # 小红书客户端
        │   ├── server/                # 🖥️ MCP服务器
        │   │   └── mcp_server.py      # MCP服务器
        │   └── utils/                 # 🛠️ 工具函数
        │       ├── logger.py          # 日志系统
        │       └── text_utils.py      # 文本处理
        ```
        
        ### ✨ 新增功能
        
        - **🔧 配置管理**: 新增配置显示、验证、示例生成功能
        - **📊 系统状态**: 完整的系统状态检查和诊断
        - **🛠️ 工具函数**: 统一的文本处理和日志系统
        - **🔌 编程接口**: 模块化的API，便于二次开发
        - **🌐 跨平台兼容**: 改进的Windows/macOS/Linux兼容性
        
        ### 🔄 向后兼容
        
        - ✅ **CLI命令保持一致**: 所有原有命令继续可用
        - ✅ **配置文件兼容**: 支持旧的配置格式
        - ✅ **Cookie格式兼容**: 支持新旧Cookie格式
        - ✅ **功能完全保留**: 保持所有原有功能
        
        ### 🚀 快速开始
        
        ```bash
        # 查看帮助
        ./xhs-toolkit --help
        
        # Cookie管理
        ./xhs-toolkit cookie save
        ./xhs-toolkit cookie show
        ./xhs-toolkit cookie validate
        
        # 配置管理
        ./xhs-toolkit config show
        ./xhs-toolkit config validate
        
        # 服务器管理
        ./xhs-toolkit server start
        ./xhs-toolkit server stop
        
        # 系统状态
        ./xhs-toolkit status
        
        # 直接发布
        ./xhs-toolkit publish "标题" "内容" --tags "标签1,标签2"
        ```
        
        ### 🔧 技术改进
        
        - **SOLID原则**: 单一职责、开闭原则、依赖倒置等
        - **类型提示**: 全面的type hints支持
        - **异步处理**: async/await异步操作
        - **资源管理**: 自动清理浏览器资源
        - **错误处理**: 统一的异常处理系统
        - **日志系统**: 基于loguru的完整日志
        - **Unicode兼容**: Windows GBK编码处理
        
        ### 📦 下载说明
        
        | 平台 | 文件 | 说明 |
        |------|------|------|
        | 🐧 Linux | `xhs-toolkit-linux-x64.tar.gz` | 适用于x64 Linux系统 |
        | 🪟 Windows | `xhs-toolkit-windows-x64.zip` | 适用于x64 Windows系统 |
        | 🍎 macOS | `xhs-toolkit-macos-x64.tar.gz` | 适用于Intel Mac |
        
        ### 💡 开发者改进
        
        - **模块化设计**: 便于扩展和维护
        - **清晰职责**: 每个模块职责明确
        - **完整文档**: 代码自文档化
        - **易于测试**: 模块独立便于单元测试
        - **配置驱动**: 行为可配置化
        

        
        ---
        
        **🎯 重构目标 100% 达成！代码质量和可维护性显著提升！**
        EOF
        else
          # 通用的发布说明模板
          cat > release-notes.md << EOF
        ## 🌺 小红书MCP工具包 ${VERSION}
        
        > 📦 **${RELEASE_TYPE} 版本发布**
        
        ### ✨ 主要特性
        - 支持小红书图文笔记自动发布
        - 完整的MCP协议支持，与Claude Desktop无缝集成
        - 智能Cookie管理和验证
        - 多平台二进制文件支持
        - 模块化框架结构，遵循SOLID原则
        
        ### 📋 功能清单
        - [x] **图文发布** - 支持发布文字和图片笔记
        - [x] **Cookie管理** - 安全获取、验证和管理登录凭证
        - [x] **MCP协议支持** - 与AI客户端完美集成
        - [x] **配置管理** - 完整的配置系统
        - [x] **系统状态** - 系统诊断和状态检查
        - [ ] **视频发布** - 支持发布视频笔记（开发中）
        
        ### 🚀 快速开始
        
        1. **下载对应平台的文件**
        2. **解压到任意目录**
        3. **复制配置文件**: \`cp env_example .env\`
        4. **编辑配置**: 填入Chrome和ChromeDriver路径
        5. **获取登录凭证**: \`./xhs-toolkit cookie save\`
        6. **启动MCP服务**: \`./xhs-toolkit server start\`
        
        ### 📦 下载说明
        
        | 平台 | 文件 | 说明 |
        |------|------|------|
        | 🐧 Linux | \`xhs-toolkit-linux-x64.tar.gz\` | 适用于x64 Linux系统 |
        | 🪟 Windows | \`xhs-toolkit-windows-x64.zip\` | 适用于x64 Windows系统 |
        | 🍎 macOS | \`xhs-toolkit-macos-x64.tar.gz\` | 适用于Intel Mac |
        
        ---
        
        **Made with ❤️ for content creators**
        EOF
        fi
        
        # 如果手动输入了额外的发布说明，追加到文件末尾
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "" >> release-notes.md
          echo "### 📝 其他说明" >> release-notes.md
          echo "" >> release-notes.md
          echo "${{ github.event.inputs.release_notes }}" >> release-notes.md
        fi
        
    - name: 🎉 创建GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.version }}
        name: "小红书MCP工具包 ${{ steps.version.outputs.version }}"
        bodyFile: release-notes.md
        draft: false
        prerelease: false
        artifacts: "release/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true  # 允许更新已存在的release
        makeLatest: true    # 标记为最新版本
        generateReleaseNotes: false  # 不使用自动生成，使用我们的自定义说明
        
    - name: 📊 发布完成通知
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} 创建成功!"
        echo "📦 包含以下文件:"
        ls -la release/
        echo "🔗 访问地址: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" 