name: 🚀 构建和发布小红书MCP工具包

on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      version:
        description: 'xhs_toolkit:v1.0.1'
        required: true
        default: 'v1.0.1'
        type: string
      release_type:
        description: '发布类型'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch   # 修复版本 (1.0.0 -> 1.0.1)
        - minor   # 功能版本 (1.0.0 -> 1.1.0)
        - major   # 重大版本 (1.0.0 -> 2.0.0)
      release_notes:
        description: '发布说明（可选，将追加到自动生成的说明后）'
        required: false
        default: ''
        type: string
  
  # 推送标签时也触发（备用方式）
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.12'

jobs:
  # ============================================
  # 代码质量检查
  # ============================================
  lint-and-test:
    name: 🔍 代码质量检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
        
    - name: 🔍 代码风格检查
      run: |
        # 跳过长行和一些常见警告
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: ✅ 语法检查
      run: |
        python -m py_compile xhs_mcp_server.py
        python -m py_compile xhs_toolkit.py  
        python -m py_compile cookie_helper.py

  # ============================================
  # 多平台构建
  # ============================================
  build:
    name: 🔨 构建 ${{ matrix.os }}
    needs: lint-and-test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: xhs-toolkit-linux-x64
            setup_cmd: |
              sudo apt-get update
              sudo apt-get install -y wget unzip xvfb
              
          - os: windows-latest  
            platform: windows
            arch: x64
            binary_name: xhs-toolkit-windows-x64.exe
            setup_cmd: |
              # Windows平台暂不安装Chrome（用户自行安装）
              echo "Windows platform setup"
              
          - os: macos-latest
            platform: macos
            arch: x64  
            binary_name: xhs-toolkit-macos-x64
            setup_cmd: |
              # macOS平台暂不安装Chrome（用户自行安装）
              echo "macOS platform setup"
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境  
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 🔧 平台特定设置
      run: ${{ matrix.setup_cmd }}
      shell: bash
      
    - name: 📦 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: 🔨 构建可执行文件
      run: |
        pyinstaller \
          --onefile \
          --name ${{ matrix.binary_name }} \
          --add-data "env_example:." \
          --hidden-import dotenv \
          --hidden-import selenium \
          --hidden-import selenium.webdriver \
          --hidden-import selenium.webdriver.chrome.service \
          --hidden-import fastmcp \
          --hidden-import loguru \
          --hidden-import pydantic \
          --console \
          xhs_toolkit.py
      shell: bash
      
    - name: 🔍 检查构建结果
      run: |
        echo "📁 构建目录结构:"
        find dist/ -type f
        echo "📦 可执行文件信息:"
        ls -la dist/
      shell: bash
      
    - name: 📤 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary_name }}
        path: |
          dist/${{ matrix.binary_name }}*
          env_example
          README.md
          LICENSE
        retention-days: 7

  # ============================================
  # 创建发布版本
  # ============================================
  release:
    name: 🎉 创建Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录，用于生成更新日志
    
    - name: 🏷️ 设置版本信息
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          VERSION="${{ github.ref_name }}"
          RELEASE_TYPE="patch"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
        echo "version_no_v=${VERSION#v}" >> $GITHUB_OUTPUT
      
    - name: 📥 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: 📦 打包发布文件
      run: |
        mkdir -p release/
        
        # 检查下载的artifact结构
        echo "📋 Artifact结构检查:"
        find artifacts/ -type f | head -20
        
        # 为每个平台创建压缩包
        cd artifacts/
        
        # Linux
        if [ -d "xhs-toolkit-linux-x64" ]; then
          mkdir -p linux-package
          # 查找Linux可执行文件
          if [ -f "xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/dist/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          elif [ -f "xhs-toolkit-linux-x64/xhs-toolkit-linux-x64" ]; then
            cp xhs-toolkit-linux-x64/xhs-toolkit-linux-x64 linux-package/xhs-toolkit
          else
            echo "❌ Linux可执行文件未找到"
            find xhs-toolkit-linux-x64/ -name "*linux*" -type f
          fi
          cp xhs-toolkit-linux-x64/{env_example,README.md,LICENSE} linux-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-linux-x64.tar.gz -C linux-package .
        fi
        
        # Windows  
        if [ -d "xhs-toolkit-windows-x64.exe" ]; then
          mkdir -p windows-package
          # 查找Windows可执行文件
          if [ -f "xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/dist/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          elif [ -f "xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe" ]; then
            cp xhs-toolkit-windows-x64.exe/xhs-toolkit-windows-x64.exe windows-package/xhs-toolkit.exe
          else
            echo "❌ Windows可执行文件未找到"
            find xhs-toolkit-windows-x64.exe/ -name "*windows*" -type f
          fi
          cp xhs-toolkit-windows-x64.exe/{env_example,README.md,LICENSE} windows-package/ 2>/dev/null || true
          cd windows-package && zip -r ../../release/xhs-toolkit-windows-x64.zip . && cd ..
        fi
        
        # macOS
        if [ -d "xhs-toolkit-macos-x64" ]; then
          mkdir -p macos-package  
          # 查找macOS可执行文件
          if [ -f "xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/dist/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          elif [ -f "xhs-toolkit-macos-x64/xhs-toolkit-macos-x64" ]; then
            cp xhs-toolkit-macos-x64/xhs-toolkit-macos-x64 macos-package/xhs-toolkit
          else
            echo "❌ macOS可执行文件未找到"
            find xhs-toolkit-macos-x64/ -name "*macos*" -type f
          fi
          cp xhs-toolkit-macos-x64/{env_example,README.md,LICENSE} macos-package/ 2>/dev/null || true
          tar -czf ../release/xhs-toolkit-macos-x64.tar.gz -C macos-package .
        fi
        
        cd ../
        echo "📦 最终发布文件:"
        ls -la release/
        
    - name: 📝 生成发布说明
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        RELEASE_TYPE="${{ steps.version.outputs.release_type }}"
        VERSION_NO_V="${{ steps.version.outputs.version_no_v }}"
        
        # 根据版本生成特定的更新说明
        if [ "${VERSION_NO_V}" = "1.0.1" ]; then
          cat > release-notes.md << 'EOF'
        ## 🌺 小红书MCP工具包 v1.0.1
        
        > 🔧 **修复版本** - 解决Cookie失效和配置问题
        
        ### 🐛 Bug修复
        
        - **🍪 修复Cookie失效问题**: 重新定位导航页面为创作者中心，解决跳转时Cookie失效的问题
        - **🌐 修复域名不匹配**: 将默认域名从 `www.xiaohongshu.com` 改为 `creator.xiaohongshu.com`
        - **🔧 修复多平台环境变量配置**: 解决Windows/Mac/Linux平台下路径配置问题
        - **📱 移除手机号验证**: 简化登录流程，完全依赖Cookie认证，不再需要手机号配置
        
        ### ✨ 改进优化
        
        - **🎯 直接访问创作者中心**: 登录时直接打开创作者中心页面，确保获取完整权限
        - **🔍 智能路径检测**: Chrome和ChromeDriver支持自动检测，减少配置复杂度
        - **📝 更新配置模板**: 简化 `env_example` 文件，移除不必要的配置项
        - **🏗️ 改进Cookie格式**: 支持新版Cookie格式，包含版本和域名信息，向下兼容旧格式
        
        ### 🛠️ 技术改进
        
        - 跨平台Chrome路径自动检测
        - 环境变量优先级配置系统
        - 增强的Cookie验证和错误处理
        - 统一的错误提示和帮助信息
        
        
        ### 🚀 快速开始
        
        1. **下载对应平台的文件**
        2. **解压到任意目录**  
        3. **复制配置文件**: `cp env_example .env`
        4. **编辑配置**: 填入Chrome和ChromeDriver路径（可选，支持自动检测）
        5. **获取登录凭证**: `./xhs-toolkit cookie save`
        6. **启动MCP服务**: `./xhs-toolkit server start`
        
        ### 📦 下载说明
        
        | 平台 | 文件 | 说明 |
        |------|------|------|
        | 🐧 Linux | `xhs-toolkit-linux-x64.tar.gz` | 适用于x64 Linux系统 |
        | 🪟 Windows | `xhs-toolkit-windows-x64.zip` | 适用于x64 Windows系统 |
        | 🍎 macOS | `xhs-toolkit-macos-x64.tar.gz` | 适用于Intel Mac |
        
        ### ⚠️ 重要变更
        
        - **不再需要手机号配置**: 删除了 `phone` 配置项，完全依赖Cookie认证
        - **配置更简单**: Chrome和ChromeDriver支持自动检测，减少手动配置
        - **Cookie域名变更**: 现在直接获取创作者中心Cookie，解决权限问题
        
        ### 💡 使用要求
        
        - **Chrome浏览器**: 必须安装Google Chrome
        - **ChromeDriver**: 需要安装匹配版本的ChromeDriver
        - **网络连接**: 需要能够访问小红书网站
        
        ### 🔗 相关链接
        
        - [📖 完整文档](https://github.com/aki66938/xiaohongshu-mcp-toolkit/blob/main/README.md)
        - [🐛 问题反馈](https://github.com/aki66938/xiaohongshu-mcp-toolkit/issues)
        - [💬 讨论交流](https://github.com/aki66938/xiaohongshu-mcp-toolkit/discussions)
        
        ---
        
        **Made with ❤️ for content creators**
        EOF
        else
          # 通用的发布说明模板
          cat > release-notes.md << EOF
        ## 🌺 小红书MCP工具包 ${VERSION}
        
        > 📦 **${RELEASE_TYPE} 版本发布**
        
        ### ✨ 主要特性
        - 支持小红书图文笔记自动发布
        - 完整的MCP协议支持，与Claude Desktop无缝集成
        - 智能Cookie管理和验证
        - 多平台二进制文件支持
        
        ### 📋 功能清单
        - [x] **图文发布** - 支持发布文字和图片笔记
        - [x] **Cookie管理** - 安全获取、验证和管理登录凭证
        - [x] **MCP协议支持** - 与AI客户端完美集成
        - [x] **用户信息** - 获取用户档案和数据分析
        - [ ] **视频发布** - 支持发布视频笔记（开发中）
        
        ### 🚀 快速开始
        
        1. **下载对应平台的文件**
        2. **解压到任意目录**
                 3. **复制配置文件**: \`cp env_example .env\`
        4. **编辑配置**: 填入Chrome和ChromeDriver路径
        5. **获取登录凭证**: \`./xhs-toolkit cookie save\`
        6. **启动MCP服务**: \`./xhs-toolkit server start\`
        
        ### 📦 下载说明
        
        | 平台 | 文件 | 说明 |
        |------|------|------|
        | 🐧 Linux | \`xhs-toolkit-linux-x64.tar.gz\` | 适用于x64 Linux系统 |
        | 🪟 Windows | \`xhs-toolkit-windows-x64.zip\` | 适用于x64 Windows系统 |
        | 🍎 macOS | \`xhs-toolkit-macos-x64.tar.gz\` | 适用于Intel Mac |
        
        ---
        
        **Made with ❤️ for content creators**
        EOF
        fi
        
        # 如果手动输入了额外的发布说明，追加到文件末尾
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "" >> release-notes.md
          echo "### 📝 其他说明" >> release-notes.md
          echo "" >> release-notes.md
          echo "${{ github.event.inputs.release_notes }}" >> release-notes.md
        fi
        
    - name: 🎉 创建GitHub Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.version }}
        name: "小红书MCP工具包 ${{ steps.version.outputs.version }}"
        bodyFile: release-notes.md
        draft: false
        prerelease: false
        artifacts: "release/*"
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true  # 允许更新已存在的release
        makeLatest: true    # 标记为最新版本
        generateReleaseNotes: false  # 不使用自动生成，使用我们的自定义说明
        
    - name: 📊 发布完成通知
      run: |
        echo "🎉 Release ${{ steps.version.outputs.version }} 创建成功!"
        echo "📦 包含以下文件:"
        ls -la release/
        echo "🔗 访问地址: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" 